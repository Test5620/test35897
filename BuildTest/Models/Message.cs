/*
 * Pushover Messenger
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Message : IEquatable<Message>
    {
        /// <summary>
        /// A message to be sent
        /// </summary>
        /// <value>A message to be sent</value>
        [Required]
        [DataMember(Name = "message")]
        public string _Message { get; set; }

        /// <summary>
        /// A Pushover app to be used to send the message
        /// </summary>
        /// <value>A Pushover app to be used to send the message</value>
        [Required]
        [DataMember(Name = "appToken")]
        public string AppToken { get; set; }

        /// <summary>
        /// A user key which represents a user to send the message to
        /// </summary>
        /// <value>A user key which represents a user to send the message to</value>
        [Required]
        [DataMember(Name = "userKey")]
        public string UserKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Message {\n");
            sb.Append("  _Message: ").Append(_Message).Append("\n");
            sb.Append("  AppToken: ").Append(AppToken).Append("\n");
            sb.Append("  UserKey: ").Append(UserKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Message)obj);
        }

        /// <summary>
        /// Returns true if Message instances are equal
        /// </summary>
        /// <param name="other">Instance of Message to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Message other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    _Message == other._Message ||
                    _Message != null &&
                    _Message.Equals(other._Message)
                ) &&
                (
                    AppToken == other.AppToken ||
                    AppToken != null &&
                    AppToken.Equals(other.AppToken)
                ) &&
                (
                    UserKey == other.UserKey ||
                    UserKey != null &&
                    UserKey.Equals(other.UserKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (_Message != null)
                    hashCode = hashCode * 59 + _Message.GetHashCode();
                if (AppToken != null)
                    hashCode = hashCode * 59 + AppToken.GetHashCode();
                if (UserKey != null)
                    hashCode = hashCode * 59 + UserKey.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Message left, Message right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Message left, Message right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
